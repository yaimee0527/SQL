#create table with columns
Create table celebs (id integer, name text, age number)
#create table table_name(column_name data type,â€¦)

#insert rows
insert into celebs(id,name,age) values(1,'justin bieber',21);
#view the table or columns
select* from celebs;

#edit a row
update celebs
Set age =22
Where id=1;
#set indicates the column to edit and where indicates the row to edit

#add a new column
alter table celebs 
add column twitter_handle text;

#delete rows
delete from celebs
where twitter_handle is null;

#select distinct
Select distinct genre
from movies;
# return unique values in the result set

#select where like
select * from movies
where name like 'se_en';
# != is 'not equal' and se_en means the spelling may different

select * from movies 
where name like '%man%';
# unlike_ % matches zero or more missing letters in the pattern
#like is not case sensitive

#select where between
select * from moviews
where name between 'A' and 'J';
#data type is text so be careful about case

# AND & OR
select * from movies
where year between 
1990 and 2000
and genre = 'comedy';

select * from movies
where genre = 'comedy'
or year <1980;

#ORDER BY
select *from movies
order by imdb_rating
desc;

#LIMIT
select * from movies
order by imdb_dating
asc
limit 3;

#COUNT()
select count(*) from fake_apps;
#() takes the number of rows where the column is not NULL

#GROUP BY
select price, count(*) 
from fake_apps
group by price;
#dont forget to select the group by column

#SUM()
select sum(downloads)
from fake_apps;

#MAX()
select max(downloads)
from fake_apps;

select name,category, max(downloads)
from fake_apps
group by category;

#MIN()
select min(downloads)
from fake_apps;

select name, category, min(downloads)
from fake_apps
group by category;

#AVG()
select avg(downloads)
from fake_apps;

select price,avg(downloads)
from fake_apps
group by price;

#ROUND()
select price, round(avg(downloads),2)
from fake_apps
group by price;

#PRIMARY KEY
create table artists(id integer primary key, name text)
#none of the values in this column are NULL
#each value in this column is unique
#a table cannot have more than one primary key column

#FOREIGN KEY
alter table albums
add foreign key (artist_id) references artists(id);

#CROSS JOIN
select albums.name, albums.year, artists.name
from albums, artists;
#not very useful because just purely combine columns from multiple tables together

#INNER JOIN
select * from albums join artists 
on albums.artist_id= artists.id;

#LEFT JOIN
select * from albums
left join artists
on albums.artist_id = artists.id;

#rename columns using AS
select albums.name as 'albums',albums.year,artists.name as 'artist'
from albums join artists 
on albums.artist_id = artists.id
where albums.year>1980;





















